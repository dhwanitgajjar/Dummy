
import streamlit as st
import requests
import json
import os
from st_diff_viewer import diff_viewer

# Add this to your existing ui.py file

# =============================================================================
# ENHANCED SESSION STATE MANAGEMENT
# =============================================================================

def initialize_change_tracking():
    """Initialize session state variables for change tracking functionality"""

    # Processing stage management
    if 'processing_stage' not in st.session_state:
        st.session_state.processing_stage = 'upload'  # upload, review, generate

    # Change tracking
    if 'document_changes' not in st.session_state:
        st.session_state.document_changes = []

    if 'change_decisions' not in st.session_state:
        st.session_state.change_decisions = {}  # change_id: 'accept'/'reject'

    if 'current_change_index' not in st.session_state:
        st.session_state.current_change_index = 0

    # Document content
    if 'original_nda_content' not in st.session_state:
        st.session_state.original_nda_content = ""

    if 'processed_nda_content' not in st.session_state:
        st.session_state.processed_nda_content = ""

# =============================================================================
# ENHANCED FASTAPI COMMUNICATION
# =============================================================================

def upload_files_with_change_extraction(uploaded_policy, uploaded_nda):
    """Enhanced version of your existing upload function"""

    files = {
        'policy_file': (uploaded_policy.name, uploaded_policy.getvalue(), uploaded_policy.type),
        'nda_file': (uploaded_nda.name, uploaded_nda.getvalue(), uploaded_nda.type)
    }

    # Call enhanced processing endpoint
    response = requests.post(
        f"{FASTAPI_URL}/process-with-changes",  # New enhanced endpoint
        files=files,
        data={'extract_individual_changes': True}
    )

    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Processing failed: {response.status_code}")
        return None

def apply_change_decisions(task_id, decisions):
    """Send change decisions to FastAPI for final document generation"""

    payload = {
        'task_id': task_id,
        'change_decisions': decisions
    }

    response = requests.post(f"{FASTAPI_URL}/apply-change-decisions", json=payload)

    if response.status_code == 200:
        return response.json()
    else:
        st.error(f"Failed to apply changes: {response.status_code}")
        return None

# =============================================================================
# CHANGE REVIEW INTERFACE
# =============================================================================

def display_change_review_interface():
    """Main interface for reviewing document changes"""

    st.header("üìã Review Document Changes")

    if not st.session_state.document_changes:
        st.warning("No changes found to review.")
        return

    total_changes = len(st.session_state.document_changes)
    reviewed_count = len(st.session_state.change_decisions)

    # Progress bar
    progress = reviewed_count / total_changes if total_changes > 0 else 0
    st.progress(progress, text=f"Reviewed {reviewed_count} of {total_changes} changes")

    # Navigation
    col_nav1, col_nav2, col_nav3 = st.columns([1, 2, 1])

    with col_nav1:
        if st.button("‚¨ÖÔ∏è Previous", disabled=st.session_state.current_change_index <= 0):
            st.session_state.current_change_index -= 1
            st.rerun()

    with col_nav2:
        # Change selector
        change_options = [f"Change {i+1}: {change['description'][:30]}..." 
                         for i, change in enumerate(st.session_state.document_changes)]

        selected_index = st.selectbox(
            "Select change to review:",
            range(len(change_options)),
            format_func=lambda x: change_options[x],
            index=st.session_state.current_change_index
        )

        if selected_index != st.session_state.current_change_index:
            st.session_state.current_change_index = selected_index
            st.rerun()

    with col_nav3:
        max_index = len(st.session_state.document_changes) - 1
        if st.button("Next ‚û°Ô∏è", disabled=st.session_state.current_change_index >= max_index):
            st.session_state.current_change_index += 1
            st.rerun()

    # Current change display
    current_change = st.session_state.document_changes[st.session_state.current_change_index]
    change_id = current_change['id']

    st.divider()

    # Change details card
    with st.container():
        st.subheader(f"Change {st.session_state.current_change_index + 1}: {current_change['type'].title()}")

        # Change metadata
        col_meta1, col_meta2 = st.columns(2)
        with col_meta1:
            st.write(f"**Type:** {current_change['type']}")
            st.write(f"**Section:** {current_change.get('section', 'Unknown')}")
        with col_meta2:
            st.write(f"**Confidence:** {current_change.get('confidence', 'N/A')}")
            current_decision = st.session_state.change_decisions.get(change_id, 'Not reviewed')
            decision_emoji = {'accept': '‚úÖ', 'reject': '‚ùå', 'Not reviewed': '‚è≥'}[current_decision]
            st.write(f"**Status:** {decision_emoji} {current_decision}")

        st.write(f"**Description:** {current_change['description']}")

    # Diff visualization
    st.subheader("üìä Change Comparison")

    # Use diff viewer for text changes
    try:
        diff_viewer(
            old_text=current_change.get('original_text', ''),
            new_text=current_change.get('new_text', ''),
            split_view=True,
            lang='none'
        )
    except Exception as e:
        # Fallback to simple before/after display
        col_before, col_after = st.columns(2)
        with col_before:
            st.write("**Original:**")
            st.text_area("", value=current_change.get('original_text', ''), disabled=True, key=f"original_{change_id}")
        with col_after:
            st.write("**Proposed:**")
            st.text_area("", value=current_change.get('new_text', ''), disabled=True, key=f"new_{change_id}")

    # Decision buttons
    st.subheader("üéØ Make Decision")

    col_accept, col_reject, col_skip = st.columns(3)

    with col_accept:
        if st.button("‚úÖ Accept Change", type="primary", use_container_width=True):
            st.session_state.change_decisions[change_id] = 'accept'
            advance_to_next_unreviewed()
            st.rerun()

    with col_reject:
        if st.button("‚ùå Reject Change", type="secondary", use_container_width=True):
            st.session_state.change_decisions[change_id] = 'reject'
            advance_to_next_unreviewed()
            st.rerun()

    with col_skip:
        if st.button("‚è≠Ô∏è Skip for Now", use_container_width=True):
            advance_to_next_change()
            st.rerun()

    # Bulk actions
    st.divider()
    st.subheader("‚ö° Bulk Actions")

    col_bulk1, col_bulk2, col_bulk3 = st.columns(3)

    with col_bulk1:
        if st.button("‚úÖ Accept All Remaining"):
            accept_all_remaining_changes()
            st.rerun()

    with col_bulk2:
        if st.button("‚ùå Reject All Remaining"):
            reject_all_remaining_changes()
            st.rerun()

    with col_bulk3:
        if st.button("üèÅ Finish Review"):
            if len(st.session_state.change_decisions) == len(st.session_state.document_changes):
                st.session_state.processing_stage = 'generate'
                st.rerun()
            else:
                st.warning("Please review all changes before finishing.")

def advance_to_next_unreviewed():
    """Move to the next change that hasn't been reviewed yet"""
    for i in range(st.session_state.current_change_index + 1, len(st.session_state.document_changes)):
        change_id = st.session_state.document_changes[i]['id']
        if change_id not in st.session_state.change_decisions:
            st.session_state.current_change_index = i
            return

    # If no unreviewed changes found, move to generate stage
    if len(st.session_state.change_decisions) == len(st.session_state.document_changes):
        st.session_state.processing_stage = 'generate'

def advance_to_next_change():
    """Move to the next change regardless of review status"""
    if st.session_state.current_change_index < len(st.session_state.document_changes) - 1:
        st.session_state.current_change_index += 1

def accept_all_remaining_changes():
    """Accept all unreviewed changes"""
    for change in st.session_state.document_changes:
        if change['id'] not in st.session_state.change_decisions:
            st.session_state.change_decisions[change['id']] = 'accept'

def reject_all_remaining_changes():
    """Reject all unreviewed changes"""
    for change in st.session_state.document_changes:
        if change['id'] not in st.session_state.change_decisions:
            st.session_state.change_decisions[change['id']] = 'reject'

# =============================================================================
# DOCUMENT GENERATION WITH SELECTED CHANGES
# =============================================================================

def display_final_generation_interface():
    """Interface for generating final documents with accepted changes"""

    st.header("üéØ Generate Final Documents")

    # Summary of decisions
    accepted_count = sum(1 for decision in st.session_state.change_decisions.values() if decision == 'accept')
    rejected_count = sum(1 for decision in st.session_state.change_decisions.values() if decision == 'reject')

    col_summary1, col_summary2, col_summary3 = st.columns(3)

    with col_summary1:
        st.metric("Total Changes", len(st.session_state.document_changes))
    with col_summary2:
        st.metric("Accepted", accepted_count, delta=accepted_count)
    with col_summary3:
        st.metric("Rejected", rejected_count, delta=rejected_count)

    # Change summary table
    if st.checkbox("Show detailed decision summary"):
        display_decision_summary_table()

    st.divider()

    # Generate documents button
    if st.button("üöÄ Generate Final Documents", type="primary", use_container_width=True):

        with st.spinner("Generating documents with your accepted changes..."):

            # Send decisions to FastAPI
            result = apply_change_decisions(
                task_id=st.session_state.get('task_id'),
                decisions=st.session_state.change_decisions
            )

            if result:
                st.success("‚úÖ Final documents generated successfully!")

                # Display enhanced download options
                display_enhanced_download_section(result.get('files', {}))

            else:
                st.error("‚ùå Failed to generate documents. Please try again.")

    # Option to go back and modify decisions
    if st.button("üîÑ Back to Review Changes"):
        st.session_state.processing_stage = 'review'
        st.rerun()

def display_decision_summary_table():
    """Display a table showing all change decisions"""

    import pandas as pd

    summary_data = []
    for i, change in enumerate(st.session_state.document_changes):
        decision = st.session_state.change_decisions.get(change['id'], 'Not reviewed')
        summary_data.append({
            'Change #': i + 1,
            'Type': change['type'],
            'Description': change['description'][:50] + '...',
            'Decision': decision,
            'Status': {'accept': '‚úÖ', 'reject': '‚ùå', 'Not reviewed': '‚è≥'}[decision]
        })

    df = pd.DataFrame(summary_data)
    st.dataframe(df, use_container_width=True)

def display_enhanced_download_section(files):
    """Enhanced download section with final documents"""

    st.subheader("üì• Download Your Customized Documents")

    # Create download layout
    col_download1, col_download2 = st.columns(2)

    with col_download1:
        st.write("### üìÑ Final HTML Document")
        st.write("Contains only your accepted changes")

        if files.get('final_html'):
            html_filename = os.path.basename(files['final_html'])
            html_content = download_file_from_fastapi(html_filename)
            if html_content:
                st.download_button(
                    label="üìÑ Download Final HTML",
                    data=html_content,
                    file_name=f"approved_nda_{html_filename}",
                    mime="text/html",
                    use_container_width=True
                )

    with col_download2:
        st.write("### üìÑ Final DOCX Document") 
        st.write("Word document with accepted changes")

        if files.get('final_docx'):
            docx_filename = os.path.basename(files['final_docx'])
            docx_content = download_file_from_fastapi(docx_filename)
            if docx_content:
                st.download_button(
                    label="üìÑ Download Final DOCX",
                    data=docx_content,
                    file_name=f"approved_nda_{docx_filename}",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    use_container_width=True
                )

    # Additional files
    st.write("### üìä Additional Files")

    col_extra1, col_extra2 = st.columns(2)

    with col_extra1:
        # Decision log
        if st.button("üìã Download Decision Log"):
            decision_log = generate_decision_log()
            st.download_button(
                label="üìã Download Decision Log (JSON)",
                data=decision_log,
                file_name=f"change_decisions_{st.session_state.get('task_id', 'unknown')}.json",
                mime="application/json"
            )

    with col_extra2:
        # Change report
        if files.get('change_report'):
            report_filename = os.path.basename(files['change_report'])
            report_content = download_file_from_fastapi(report_filename)
            if report_content:
                st.download_button(
                    label="üìä Download Change Report",
                    data=report_content,
                    file_name=f"change_report_{report_filename}",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

def generate_decision_log():
    """Generate a JSON log of all change decisions"""

    decision_log = {
        'task_id': st.session_state.get('task_id'),
        'timestamp': pd.Timestamp.now().isoformat(),
        'total_changes': len(st.session_state.document_changes),
        'decisions': st.session_state.change_decisions,
        'summary': {
            'accepted': sum(1 for d in st.session_state.change_decisions.values() if d == 'accept'),
            'rejected': sum(1 for d in st.session_state.change_decisions.values() if d == 'reject')
        },
        'changes_detail': st.session_state.document_changes
    }

    return json.dumps(decision_log, indent=2)

# =============================================================================
# INTEGRATION WITH EXISTING CODE
# =============================================================================

# MODIFY YOUR EXISTING MAIN PROCESSING SECTION:
# Replace the existing processing logic after "Processing complete!" with this:

def enhanced_processing_complete_handler(status_data):
    """Enhanced version of your existing processing complete handler"""

    files = status_data.get('files', {})
    preview_content = status_data.get('preview_content', '')

    # NEW: Check if changes were extracted
    if status_data.get('changes'):
        st.session_state.document_changes = status_data['changes']
        st.session_state.original_nda_content = status_data.get('original_content', '')
        st.session_state.processed_nda_content = status_data.get('processed_content', '')
        st.session_state.task_id = status_data.get('task_id')

        # Show changes found message
        change_count = len(st.session_state.document_changes)
        st.success(f"‚úÖ Processing complete! {change_count} changes identified for review.")

        # Option to review changes or use original flow
        col_option1, col_option2 = st.columns(2)

        with col_option1:
            if st.button("üìã Review Changes Individually", type="primary", use_container_width=True):
                st.session_state.processing_stage = 'review'
                st.rerun()

        with col_option2:
            if st.button("‚ö° Accept All Changes", use_container_width=True):
                # Accept all changes automatically
                for change in st.session_state.document_changes:
                    st.session_state.change_decisions[change['id']] = 'accept'
                st.session_state.processing_stage = 'generate'
                st.rerun()

        st.divider()
        st.subheader("üìÑ Original Processed Results")
        st.write("You can still download the original processed files if needed:")

    # Original results display (your existing code)
    st.subheader("Rewritten NDA (HTML)")
    if preview_content:
        st.markdown(preview_content, unsafe_allow_html=True)
    else:
        st.warning("No preview content available")

    # Your existing download buttons
    display_original_download_buttons(files)

# =============================================================================
# MAIN ENHANCED UI FUNCTION
# =============================================================================

def main_enhanced():
    """Enhanced main function with stage management"""

    st.set_page_config(
        page_title="NDA Processing with Change Review",
        page_icon="üìÑ",
        layout="wide"
    )

    st.title("üìÑ NDA Processing with LLM - Enhanced")

    # Initialize change tracking
    initialize_change_tracking()

    # Sidebar navigation
    with st.sidebar:
        st.subheader("üß≠ Navigation")

        stage_icons = {
            'upload': 'üì§',
            'review': 'üìã', 
            'generate': 'üéØ'
        }

        current_stage = st.session_state.processing_stage
        st.write(f"Current Stage: {stage_icons[current_stage]} {current_stage.title()}")

        if st.session_state.document_changes:
            st.write(f"Changes Found: {len(st.session_state.document_changes)}")
            st.write(f"Decisions Made: {len(st.session_state.change_decisions)}")

        # Reset button
        if st.button("üîÑ Start Over"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

    # Stage-based content display
    if st.session_state.processing_stage == 'upload':
        display_upload_stage()
    elif st.session_state.processing_stage == 'review':
        display_change_review_interface()
    elif st.session_state.processing_stage == 'generate':
        display_final_generation_interface()

def display_upload_stage():
    """Upload stage with your existing logic + enhancements"""

    st.write("Upload your Policy and NDA documents to generate a revised NDA.")

    # Connection status
    if st.session_state.get('api_connected'):
        st.success("‚úÖ Connected to FastAPI backend")

    # Your existing upload interface
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Upload Policy Document")
        uploaded_policy = st.file_uploader(
            "Drag and drop file here", 
            type=['doc', 'docx', 'pdf'],
            help="Limit 200MB per file ‚Ä¢ DOC, DOCX, PDF",
            key="policy"
        )

    with col2:
        st.subheader("Upload NDA Document")
        uploaded_nda = st.file_uploader(
            "Drag and drop file here",
            type=['doc', 'docx', 'pdf'], 
            help="Limit 200MB per file ‚Ä¢ DOC, DOCX, PDF",
            key="nda"
        )

    # Process button (enhanced)
    if uploaded_policy and uploaded_nda:
        if st.button("Process Documents", type="primary"):

            # Enhanced processing with change extraction
            result = upload_files_with_change_extraction(uploaded_policy, uploaded_nda)

            if result:
                task_id = result.get('task_id')
                st.success(f"Processing started! Task ID: {task_id}")

                # Monitor processing with change extraction
                with st.spinner("Processing... This may take a few minutes."):
                    status_data = monitor_processing_status(task_id)

                    if status_data:
                        enhanced_processing_complete_handler(status_data)
                    else:
                        st.error("Processing failed or timed out")
            else:
                st.warning("Please upload both a policy and an NDA document to proceed.")

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================
"""
To integrate this enhanced functionality into your existing ui.py:

1. Install the required dependencies:
   pip install st-diff-viewer html-diff

2. Add the functions above to your ui.py file

3. Replace your existing main processing logic with main_enhanced()

4. Modify your FastAPI backend to support the new endpoints:
   - /process-with-changes (enhanced processing)
   - /apply-change-decisions (generate final docs)

5. Update your monitor_processing_status function to handle change data

The enhanced UI will seamlessly integrate with your existing workflow while
adding the powerful change review functionality you requested.
"""
