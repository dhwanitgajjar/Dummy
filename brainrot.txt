import streamlit as st
import os
import sys
import pandas as pd
from bs4 import BeautifulSoup
import requests
import time
import io

# Configuration for FastAPI backend
FASTAPI_BASE_URL = "http://localhost:8000"  # Adjust this to your FastAPI server URL

# Adjust the path to import from the 'base' directory correctly (if needed for constants)
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# Import only constants if needed for display purposes
try:
    from base.constants import (INPUT_DIR, OUTPUT_DIR, GPT_MODEL, MULTIPLIER, SKIP_MAX_ATTEMPTS, CLAUSES_PRESENT)
except ImportError:
    # Fallback values if constants not available
    INPUT_DIR = "input"
    OUTPUT_DIR = "output"
    GPT_MODEL = "gpt-4"
    MULTIPLIER = 1
    SKIP_MAX_ATTEMPTS = False
    CLAUSES_PRESENT = True

# Ensure directories exist (for local file handling if needed)
os.makedirs(INPUT_DIR, exist_ok=True)
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Initialize session state for managing workflow stages
if 'processing_stage' not in st.session_state:
    st.session_state.processing_stage = 'upload'
if 'task_id' not in st.session_state:
    st.session_state.task_id = None
if 'suggestions_data' not in st.session_state:
    st.session_state.suggestions_data = None
if 'accepted_suggestions' not in st.session_state:
    st.session_state.accepted_suggestions = {}

# Function to save uploaded file (kept for compatibility)
def save_uploaded_file(uploaded_file, directory):
    """Saves an uploaded file to a specified directory."""
    if uploaded_file is not None:
        file_path = os.path.join(directory, uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        return file_path
    return None

def upload_files_to_fastapi(policy_file, nda_file):
    """Upload files to FastAPI backend and start processing for suggestions"""
    try:
        # Prepare files for upload
        files = {
            'policy_file': (policy_file.name, policy_file.getvalue(), policy_file.type),
            'nda_file': (nda_file.name, nda_file.getvalue(), nda_file.type)
        }

        # Make API call to start processing
        response = requests.post(f"{FASTAPI_BASE_URL}/process", files=files)

        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Upload failed: {response.status_code} - {response.text}")
            return None

    except requests.exceptions.ConnectionError:
        st.error("Cannot connect to FastAPI server. Make sure it's running on port 8000.")
        return None
    except Exception as e:
        st.error(f"Error uploading files: {str(e)}")
        return None

def monitor_suggestions_processing(task_id):
    """Monitor processing status for suggestion generation"""
    progress_bar = st.progress(0)
    status_text = st.empty()

    max_attempts = 60  # 5 minutes with 5-second intervals
    attempt = 0

    while attempt < max_attempts:
        try:
            response = requests.get(f"{FASTAPI_BASE_URL}/status/{task_id}")

            if response.status_code == 200:
                status_data = response.json()
                status = status_data.get('status', 'unknown')
                progress = status_data.get('progress', 0)
                stage = status_data.get('stage', 'processing')

                # Update progress bar and status
                progress_bar.progress(progress / 100.0)
                status_text.text(f"Status: {status} | Progress: {progress}% | Stage: {stage}")

                if status == 'suggestions_ready':
                    progress_bar.progress(1.0)
                    status_text.success("Suggestions generated successfully!")
                    return True

                elif status == 'error':
                    error_msg = status_data.get('error', 'Unknown error')
                    status_text.error(f"Processing failed: {error_msg}")
                    return False

                else:
                    # Still processing, wait and check again
                    time.sleep(5)
                    attempt += 1

            else:
                status_text.error(f"Status check failed: {response.status_code}")
                return False

        except Exception as e:
            status_text.error(f"Error checking status: {str(e)}")
            return False

    status_text.error("Processing timeout - took too long (5+ minutes)")
    return False

def get_suggestions_from_fastapi(task_id):
    """Get suggestions from FastAPI backend"""
    try:
        response = requests.get(f"{FASTAPI_BASE_URL}/suggestions/{task_id}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Failed to get suggestions: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"Error getting suggestions: {str(e)}")
        return None

def submit_accepted_suggestions(task_id, accepted_suggestions):
    """Submit accepted suggestions to FastAPI backend"""
    try:
        data = {
            "task_id": task_id,
            "accepted_suggestions": accepted_suggestions
        }
        response = requests.post(f"{FASTAPI_BASE_URL}/accept-suggestions", json=data)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Failed to submit suggestions: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"Error submitting suggestions: {str(e)}")
        return None

def generate_final_document(task_id):
    """Generate final document with accepted suggestions"""
    try:
        response = requests.post(f"{FASTAPI_BASE_URL}/generate-final/{task_id}")
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"Failed to generate final document: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        st.error(f"Error generating final document: {str(e)}")
        return None

def monitor_final_processing(task_id):
    """Monitor processing status for final document generation"""
    progress_bar = st.progress(0)
    status_text = st.empty()

    max_attempts = 60  # 5 minutes with 5-second intervals
    attempt = 0

    while attempt < max_attempts:
        try:
            response = requests.get(f"{FASTAPI_BASE_URL}/status/{task_id}")

            if response.status_code == 200:
                status_data = response.json()
                status = status_data.get('status', 'unknown')
                progress = status_data.get('progress', 0)
                stage = status_data.get('stage', 'processing')

                # Update progress bar and status
                progress_bar.progress(progress / 100.0)
                status_text.text(f"Status: {status} | Progress: {progress}% | Stage: {stage}")

                if status == 'completed':
                    progress_bar.progress(1.0)
                    status_text.success("Final document generated successfully!")
                    return status_data

                elif status == 'error':
                    error_msg = status_data.get('error', 'Unknown error')
                    status_text.error(f"Processing failed: {error_msg}")
                    return None

                else:
                    # Still processing, wait and check again
                    time.sleep(5)
                    attempt += 1

            else:
                status_text.error(f"Status check failed: {response.status_code}")
                return None

        except Exception as e:
            status_text.error(f"Error checking status: {str(e)}")
            return None

    status_text.error("Processing timeout - took too long (5+ minutes)")
    return None

def download_file_from_fastapi(filename):
    """Download a file from FastAPI backend"""
    try:
        response = requests.get(f"{FASTAPI_BASE_URL}/download/{filename}")
        if response.status_code == 200:
            return response.content
        else:
            st.error(f"Download failed for {filename}: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Error downloading {filename}: {str(e)}")
        return None

def display_suggestion_review(suggestions_data):
    """Display suggestions with checkboxes for user to accept/reject"""
    st.header("📋 Review and Accept Suggestions")
    st.markdown("Review the suggestions below and check the ones you want to accept. Only accepted suggestions will be applied to the final document.")

    suggestions = suggestions_data.get('suggestions', [])

    if not suggestions:
        st.warning("No suggestions were generated for this document.")
        return False

    # Add select all/none buttons
    col1, col2, col3 = st.columns([1, 1, 4])
    with col1:
        if st.button("✅ Accept All"):
            for suggestion in suggestions:
                suggestion_key = suggestion['suggestion_key']
                st.session_state.accepted_suggestions[suggestion_key] = True
            st.rerun()
    with col2:
        if st.button("❌ Reject All"):
            for suggestion in suggestions:
                suggestion_key = suggestion['suggestion_key']
                st.session_state.accepted_suggestions[suggestion_key] = False
            st.rerun()

    st.markdown("---")

    # Display each suggestion with checkbox
    for suggestion in suggestions:
        suggestion_key = suggestion['suggestion_key']
        suggestion_id = suggestion['id']

        # Create a container for each suggestion
        with st.container():
            col_check, col_content = st.columns([0.1, 0.9])

            with col_check:
                # Checkbox for accepting/rejecting suggestion
                accepted = st.checkbox(
                    "Accept", 
                    key=suggestion_key,
                    value=st.session_state.accepted_suggestions.get(suggestion_key, suggestion.get('accepted', True))
                )
                st.session_state.accepted_suggestions[suggestion_key] = accepted

            with col_content:
                # Display suggestion details
                suggestion_title = suggestion.get('title', f'Suggestion {suggestion_id+1}')
                suggestion_content = suggestion.get('content', 'No content available')
                suggestion_rationale = suggestion.get('rationale', 'No rationale provided')
                section = suggestion.get('section', 'Unknown section')

                # Color code based on acceptance
                if accepted:
                    st.success(f"**✅ {suggestion_title}** (Section: {section})")
                else:
                    st.error(f"**❌ {suggestion_title}** (Section: {section})")

                # Show suggestion details in an expander
                with st.expander(f"View details for {suggestion_title}"):
                    st.markdown(f"**Suggestion:** {suggestion_content}")
                    st.markdown(f"**Rationale:** {suggestion_rationale}")
                    if suggestion.get('original_text'):
                        st.markdown(f"**Original Text:** {suggestion['original_text']}")
                    if suggestion.get('proposed_text'):
                        st.markdown(f"**Proposed Text:** {suggestion['proposed_text']}")

        st.markdown("---")

    # Summary
    accepted_count = sum(1 for v in st.session_state.accepted_suggestions.values() if v)
    total_count = len(suggestions)

    col1, col2 = st.columns(2)
    with col1:
        st.metric("Accepted Suggestions", accepted_count)
    with col2:
        st.metric("Total Suggestions", total_count)

    return True

# --- Streamlit UI ---
st.set_page_config(page_title="Document Processing App with Suggestions", layout="wide")
st.markdown(
    """
    <style>
    .stApp {
        background-color: grey;
    }
    </style>
    """,
    unsafe_allow_html=True
)
st.title("NDA Processing with LLM - Enhanced with Suggestions")
st.markdown("Upload your Policy and NDA documents, review suggestions with checkboxes, and generate a customized revised NDA.")

# Display FastAPI connection status
try:
    response = requests.get(f"{FASTAPI_BASE_URL}/", timeout=5)
    if response.status_code == 200:
        st.success("✅ Connected to FastAPI backend with suggestions support")
    else:
        st.warning(f"⚠️ FastAPI backend responded with status: {response.status_code}")
except:
    st.error("❌ Cannot connect to FastAPI backend. Make sure it's running on port 8000.")
    st.info("Run: `uvicorn fastapi_with_suggestions:app --reload` to start the FastAPI server")

# Stage 1: File Upload and Initial Processing
if st.session_state.processing_stage == 'upload':
    # File uploaders
    col1, col2 = st.columns(2)
    with col1:
        uploaded_policy = st.file_uploader("Upload Policy Document", type=["doc", "docx", "pdf"])
    with col2:
        uploaded_nda = st.file_uploader("Upload NDA Document", type=["doc", "docx", "pdf"])

    # Processing button
    if st.button("Generate Suggestions"):
        if uploaded_policy and uploaded_nda:
            st.info("Uploading files and generating suggestions...")

            # Upload files to FastAPI and start processing
            result = upload_files_to_fastapi(uploaded_policy, uploaded_nda)

            if result:
                task_id = result.get('task_id')
                st.session_state.task_id = task_id
                st.success(f"Processing started! Task ID: {task_id}")

                # Monitor processing status
                with st.spinner("Generating suggestions... This may take a few minutes."):
                    success = monitor_suggestions_processing(task_id)

                    if success:
                        # Get suggestions from API
                        suggestions_data = get_suggestions_from_fastapi(task_id)
                        if suggestions_data:
                            st.session_state.suggestions_data = suggestions_data
                            st.session_state.processing_stage = 'review'
                            st.success("Suggestions generated successfully!")
                            st.rerun()
        else:
            st.warning("Please upload both a policy and an NDA document to proceed.")

# Stage 2: Review Suggestions
elif st.session_state.processing_stage == 'review':
    # Display suggestions for review
    has_suggestions = display_suggestion_review(st.session_state.suggestions_data)

    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("🔄 Start Over"):
            # Reset session state
            st.session_state.processing_stage = 'upload'
            st.session_state.task_id = None
            st.session_state.suggestions_data = None
            st.session_state.accepted_suggestions = {}
            st.rerun()

    with col2:
        if st.button("✅ Generate Final Document"):
            if has_suggestions:
                # Submit accepted suggestions to FastAPI
                result = submit_accepted_suggestions(st.session_state.task_id, st.session_state.accepted_suggestions)
                if result:
                    st.session_state.processing_stage = 'final'
                    st.rerun()

# Stage 3: Generate Final Document
elif st.session_state.processing_stage == 'final':
    st.header("📄 Generating Final Document")

    # Start final document generation
    result = generate_final_document(st.session_state.task_id)
    if result:
        with st.spinner("Generating final document with your accepted suggestions..."):
            status_data = monitor_final_processing(st.session_state.task_id)

            if status_data:
                st.success("Final document generated successfully!")

                # Display results
                files = status_data.get('files', {})
                preview_content = status_data.get('preview_content', '')
                accepted_count = status_data.get('accepted_count', 0)
                total_count = status_data.get('total_count', 0)

                # Display and Download Buttons
                st.subheader("Results")
                excel_report_path = files.get('excel_report', '')
                st.markdown(f"**Reports saved to:** `{os.path.basename(excel_report_path) if excel_report_path else 'Unknown'}`")

                # Show summary of accepted suggestions
                st.info(f"Applied {accepted_count} out of {total_count} suggested changes")

                # Show the HTML result directly in the app
                st.subheader("Rewritten NDA (HTML)")
                if preview_content:
                    st.markdown(preview_content, unsafe_allow_html=True)
                else:
                    st.warning("No preview content available")

                # Download buttons
                st.subheader("Download Files")

                # Create download buttons for each file
                download_col1, download_col2 = st.columns(2)

                with download_col1:
                    # Download Rewritten HTML
                    if files.get('html_with_revisions'):
                        html_filename = os.path.basename(files['html_with_revisions'])
                        html_content = download_file_from_fastapi(html_filename)
                        if html_content:
                            st.download_button(
                                label="Download Rewritten HTML",
                                data=html_content,
                                file_name=html_filename,
                                mime="text/html"
                            )

                with download_col2:
                    # Download Rewritten DOCX
                    if files.get('docx_file'):
                        docx_filename = os.path.basename(files['docx_file'])
                        docx_content = download_file_from_fastapi(docx_filename)
                        if docx_content:
                            st.download_button(
                                label="Download Rewritten DOCX",
                                data=docx_content,
                                file_name=docx_filename,
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                            )

                # Additional download options
                st.subheader("Additional Downloads")
                download_col3, download_col4 = st.columns(2)

                with download_col3:
                    # Download Excel Report
                    if files.get('excel_report'):
                        excel_filename = os.path.basename(files['excel_report'])
                        excel_content = download_file_from_fastapi(excel_filename)
                        if excel_content:
                            st.download_button(
                                label="Download Excel Report",
                                data=excel_content,
                                file_name=excel_filename,
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )

                with download_col4:
                    # Download HTML without rationale
                    if files.get('html_no_rationale'):
                        html_no_rat_filename = os.path.basename(files['html_no_rationale'])
                        html_no_rat_content = download_file_from_fastapi(html_no_rat_filename)
                        if html_no_rat_content:
                            st.download_button(
                                label="Download HTML (No Rationale)",
                                data=html_no_rat_content,
                                file_name=html_no_rat_filename,
                                mime="text/html"
                            )

                # Additional options
                st.subheader("Additional Options")
                col1, col2 = st.columns(2)

                with col1:
                    if st.button("📝 Review Suggestions Again"):
                        st.session_state.processing_stage = 'review'
                        st.rerun()

                with col2:
                    if st.button("🔄 Start New Document"):
                        # Reset session state
                        st.session_state.processing_stage = 'upload'
                        st.session_state.task_id = None
                        st.session_state.suggestions_data = None
                        st.session_state.accepted_suggestions = {}
                        st.rerun()

# Sidebar with workflow status
with st.sidebar:
    st.header("📊 Workflow Status")

    if st.session_state.processing_stage == 'upload':
        st.success("1. Upload Documents")
        st.info("2. Review Suggestions")
        st.info("3. Generate Final Document")
    elif st.session_state.processing_stage == 'review':
        st.success("1. Upload Documents ✅")
        st.success("2. Review Suggestions")
        st.info("3. Generate Final Document")
    elif st.session_state.processing_stage == 'final':
        st.success("1. Upload Documents ✅")
        st.success("2. Review Suggestions ✅")
        st.success("3. Generate Final Document")

    if st.session_state.suggestions_data:
        st.markdown("---")
        st.subheader("📈 Current Session")
        total_suggestions = st.session_state.suggestions_data.get('total_count', 0)
        accepted_suggestions = sum(1 for v in st.session_state.accepted_suggestions.values() if v)
        st.metric("Total Suggestions", total_suggestions)
        st.metric("Accepted", accepted_suggestions)
        st.metric("Rejected", total_suggestions - accepted_suggestions)

        if st.session_state.task_id:
            st.markdown(f"**Task ID:** `{st.session_state.task_id}`")

# Add some useful information for users
with st.expander("ℹ️ How it works"):
    st.markdown(f"""
    **This application uses a FastAPI backend for enhanced processing:**

    1. **Upload Documents**: Upload your policy and NDA documents
    2. **Generate Suggestions**: The system analyzes documents and generates suggestions
    3. **Review & Select**: Use checkboxes to accept/reject individual suggestions
    4. **Generate Final**: Create final document with only your accepted suggestions
    5. **Download**: Get the customized files with only approved changes

    **Technical Details:**
    - FastAPI Server: `{FASTAPI_BASE_URL}`
    - Processing runs asynchronously on the backend
    - Each suggestion can be individually accepted or rejected
    - Final output contains only your approved changes
    - All generated files are available for download
    """)

with st.expander("🔧 Configuration"):
    st.markdown(f"""
    **Current Configuration:**
    - FastAPI URL: `{FASTAPI_BASE_URL}`
    - GPT Model: `{GPT_MODEL}`
    - Multiplier: `{MULTIPLIER}`
    - Skip Max Attempts: `{SKIP_MAX_ATTEMPTS}`
    - Clauses Present: `{CLAUSES_PRESENT}`

    **Directories:**
    - Input Directory: `{INPUT_DIR}`
    - Output Directory: `{OUTPUT_DIR}`
    """)
